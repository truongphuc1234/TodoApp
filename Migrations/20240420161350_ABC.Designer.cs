// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Podomoro.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240420161350_ABC")]
    partial class ABC
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("Label", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TaskItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.HasIndex("TaskItemId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("EndAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRepeat")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Remind")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("StartAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("WorkPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Buffer")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WorkTemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkTemplateId");

                    b.ToTable("WorkPeriod");
                });

            modelBuilder.Entity("WorkQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Buffer")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("EndAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("StartAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkQueues");
                });

            modelBuilder.Entity("WorkTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkTemplates");
                });

            modelBuilder.Entity("Label", b =>
                {
                    b.HasOne("TaskItem", null)
                        .WithMany("Labels")
                        .HasForeignKey("TaskItemId");
                });

            modelBuilder.Entity("WorkPeriod", b =>
                {
                    b.HasOne("WorkTemplate", null)
                        .WithMany("Periods")
                        .HasForeignKey("WorkTemplateId");
                });

            modelBuilder.Entity("TaskItem", b =>
                {
                    b.Navigation("Labels");
                });

            modelBuilder.Entity("WorkTemplate", b =>
                {
                    b.Navigation("Periods");
                });
#pragma warning restore 612, 618
        }
    }
}
